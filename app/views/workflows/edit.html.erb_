%= render :partial => 'action_menu' %>

<%= content_for :header_tags do %>
<%= stylesheet_link_tag 'graph.css', :plugin => 'redmine_workflow_viz', :media => 'all' %>
<%= javascript_include_tag 'cytoscape.min.js', :plugin => 'redmine_workflow_viz' %>
<% end %>

<%= title l(:label_workflow) %>

<div class="tabs">
  <ul>
    <li><%= link_to l(:label_status_transitions), workflows_edit_path(:role_id => @roles, :tracker_id => @trackers), :class => 'selected' %></li>
    <li><%= link_to l(:label_fields_permissions), workflows_permissions_path(:role_id => @roles, :tracker_id => @trackers) %></li>
  </ul>
</div>

<p><%=l(:text_workflow_edit)%>:</p>

<%= form_tag({}, :method => 'get') do %>
<p>
  <label><%=l(:label_role)%>:
  <%= options_for_workflow_select 'role_id[]', Role.sorted.select(&:consider_workflow?), @roles, :id => 'role_id', :class => 'expandable' %>
  </label>
  <a href="#" data-expands="#role_id"><span class="toggle-multiselect"></span></a>

  <label><%=l(:label_tracker)%>:
  <%= options_for_workflow_select 'tracker_id[]', Tracker.sorted, @trackers, :id => 'tracker_id', :class => 'expandable' %>
  </label>
  <a href="#" data-expands="#tracker_id"><span class="toggle-multiselect"></span></a>

  <%= submit_tag l(:button_edit), :name => nil %>

  <%= hidden_field_tag 'used_statuses_only', '0', :id => nil %>
  <label><%= check_box_tag 'used_statuses_only', '1', @used_statuses_only %> <%= l(:label_display_used_statuses_only) %></label>

</p>
<% end %>

<% if @trackers && @roles && @statuses.any? %>
  <%= form_tag({}, :id => 'workflow_form' ) do %>
    <%= @trackers.map {|tracker| hidden_field_tag 'tracker_id[]', tracker.id, :id => nil}.join.html_safe %>
    <%= @roles.map {|role| hidden_field_tag 'role_id[]', role.id, :id => nil}.join.html_safe %>
    <%= hidden_field_tag 'used_statuses_only', params[:used_statuses_only], :id => nil %>
    <div class="autoscroll">
      <%= render :partial => 'form', :locals => {:name => 'always', :workflows => @workflows['always']} %>

      <fieldset class="collapsible" style="padding: 0; margin-top: 0.5em;">
        <legend onclick="toggleFieldset(this);"><%= l(:label_additional_workflow_transitions_for_author) %></legend>
        <div id="author_workflows" style="margin: 0.5em 0 0.5em 0;">
          <%= render :partial => 'form', :locals => {:name => 'author', :workflows => @workflows['author']} %>
        </div>
      </fieldset>
      <%= javascript_tag "hideFieldset($('#author_workflows'))" unless @workflows['author'].present? %>

      <fieldset class="collapsible" style="padding: 0;">
        <legend onclick="toggleFieldset(this);"><%= l(:label_additional_workflow_transitions_for_assignee) %></legend>
        <div id="assignee_workflows" style="margin: 0.5em 0 0.5em 0;">
      <%= render :partial => 'form', :locals => {:name => 'assignee', :workflows => @workflows['assignee']} %>
        </div>
      </fieldset>
      <%= javascript_tag "hideFieldset($('#assignee_workflows'))" unless @workflows['assignee'].present? %>
    </div>
    <%= submit_tag l(:button_save) %>
  <% end %>
<% end %>

<%= javascript_tag do %>
$("a[data-expands]").click(function(e){
  e.preventDefault();
  var target = $($(this).attr("data-expands"));
  if (target.attr("multiple")) {
    target.attr("multiple", false);
    target.find("option[value=all]").show();
  } else {
    target.attr("multiple", true);
    target.find("option[value=all]").attr("selected", false).hide();
  }
});

<% end %>

<!-- %= image_tag(generate_graph(@roles[0], @trackers[0])) if @roles % -->

    <div id="cy"></div>
    <script>

var getStatusNames = function() {
    names = ['New issue'];

    thead = document.getElementById('workflow_form').getElementsByTagName('table')[0].getElementsByTagName('thead')[0];
    tds = thead.getElementsByTagName('td');
    for (var i = 1; i < tds.length; i++) {
        td = tds[i];
        names.push(td.innerText)
    }

    return names;
}

var setupTransitionStatusEvent = function() {
    tbody = document.getElementById('workflow_form').getElementsByTagName('table')[0].getElementsByTagName('tbody')[0];
    trs = tbody.getElementsByTagName('tr');
    for (var i = 0; i < trs.length; i++) {
        tr = trs[i];
        inputs = tr.getElementsByTagName('input');
        for (var j = 0; j < inputs.length; j++) {
            input = inputs[j];
            if(input.id == '') {
                continue;
            }

            input.addEventListener('change', transitionStatusChanged);
        }
    }
}

var getCheckedItems = function () {
    ret = [];
    tbody = document.getElementById('workflow_form').getElementsByTagName('table')[0].getElementsByTagName('tbody')[0];
    trs = tbody.getElementsByTagName('tr');
    for (var i = 1; i < trs.length; i++) {
        tr = trs[i];
        inputs = tr.getElementsByTagName('input');
        for (var j = 0; j < inputs.length; j++) {
            input = inputs[j];
            if(input.id == '') {
                continue;
            }

            if(input.checked == true) {
                sname = input.id.split('_');
                src = Number(sname[1]);
                dst = Number(sname[2]);
                ret.push([src, dst]);
            }
        }
    }

    return ret;
}

var transitionStatusChanged = function(event) {
    var item = event.target

    var sname = item.id.split('_');
    var src = Number(sname[1]);
    var dst = Number(sname[2]);
    
    var name = 'edge_' + src + '_' + dst;

    if(item.checked == true) {
        cy.add({
            data: {
                id: name,
                source: names[src],
                target: names[dst],
                directed : true
            }
        });
    } else {
        var e = cy.getElementById(name);
        cy.remove(e);
    }


    //var names = getStatusNames();
    //var mtx = getCheckMatrix();
    //updateGraph(names, mtx);
}

cy = null;

var updateGraph = function(names) {
    edges = getCheckedItems();

    cy = cytoscape({
        container: document.getElementById('cy'),
    	boxSelectionEnabled: true,
        elements: [],
        style: [{
            selector: 'edge',
            style: {
                'width': '3px',
                'curve-style': 'bezier',
                'target-arrow-shape': 'triangle'
            }
        },
        {
            selector: 'node',
            style: {
                'shape': 'roundrectangle',
                'width': 40,
                'background-color': 'red',
                'label': 'data(id)'
            }
        }]
    });

    for (var i = 0; i < names.length; i++) {
        cy.add({
            data: {
                id: names[i]
            }
        });
    }

    for (var i = 0; i < edges.length; i++) {
        var src = edges[i][0];
        var dst = edges[i][1];
        cy.add({
            data: {
                id: 'edge_' + src + '_' + dst,
                source: names[src],
                target: names[dst],
                directed : true
            }
        });
    }

    layout = cy.layout({
        name: 'cose',
        fit: true,
        directed: true
    });
    layout.run();
}

setupTransitionStatusEvent();
names = getStatusNames()
updateGraph(names);
</script>

